import javax.swing.*;
import java.awt.*;

public class HeatMap extends JPanel {
    // Code generated by ChatGPT
    // PROMPTS:
    // Could you generate a heatmap similar to the one used by GitHub
    // Could you add a key with the max being 50

    private int[][] data; // Activity data for the heatmap

    public HeatMap(int[][] data) {
        this.data = data;
        setLayout(new BorderLayout());
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        int numRows = data.length;
        int numCols = data[0].length;

        int cellSize = 10; // Size of each heatmap cell
        int padding = 1; // Padding between cells

        // Calculate total width and height of the heatmap
        int totalWidth = numCols * (cellSize + padding);
        int totalHeight = numRows * (cellSize + padding);

        // Calculate starting position to center the heatmap
        int startX = (getWidth() - totalWidth) / 2;
        int startY = (getHeight() - totalHeight) / 2;

        // Define day titles
        String[] daysOfWeek = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};

        // Draw day titles
        g2d.setColor(Color.WHITE);
        Font dayFont = new Font("Arial", Font.PLAIN, 12);
        g2d.setFont(dayFont);
        int dayHeight = (int) g2d.getFontMetrics().getStringBounds("A", g2d).getHeight();
        for (int i = 0; i < 7; i++) {
            String dayTitle = daysOfWeek[i];
            int dayX = startX - g2d.getFontMetrics().stringWidth(dayTitle) - 5;
            int dayY = startY + (i * (cellSize + padding)) + (cellSize + dayHeight) / 2; // Adjusted position
            g2d.drawString(dayTitle, dayX, dayY);
        }

        // Define month titles
        String[] months = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

        // Draw month titles
        int titleHeight = (int) g2d.getFontMetrics().getStringBounds("A", g2d).getHeight();
        int titleWidth = totalWidth / 12; // Assuming 12 months
        for (int i = 0; i < 12; i++) {
            String monthTitle = months[i];
            int titleX = startX + i * titleWidth + (titleWidth - g2d.getFontMetrics().stringWidth(monthTitle)) / 2;
            g2d.drawString(monthTitle, titleX, startY - 5 - titleHeight);
        }

        /*
        // Draw key
        int keyX = startX + totalWidth + 20;
        int keyY = startY;
        int keyWidth = 100;
        int keyHeight = totalHeight;
        g2d.drawRect(keyX, keyY, keyWidth, keyHeight);
        g2d.setFont(dayFont);
        g2d.drawString("Key:", keyX + 10, keyY + 15);
        g2d.drawString("0-10", keyX + 10, keyY + 30);
        g2d.drawString("11-25", keyX + 10, keyY + 45);
        g2d.drawString("26-50", keyX + 10, keyY + 60);
        g2d.drawString("50+", keyX + 10, keyY + 75);
        g2d.setColor(new Color(136, 196, 255)); // Light blue
        g2d.fillRect(keyX + 60, keyY + 20, 20, 10);
        g2d.setColor(new Color(21, 121, 255)); // Medium blue
        g2d.fillRect(keyX + 60, keyY + 35, 20, 10);
        g2d.setColor(new Color(0, 47, 255)); // Dark blue
        g2d.fillRect(keyX + 60, keyY + 50, 20, 10);
        g2d.setColor(Color.BLUE); // Darkest blue
        g2d.fillRect(keyX + 60, keyY + 65, 20, 10);

         */

        // Loop through the data and draw heatmap cells
        for (int row = 0; row < numRows; row++) {
            for (int col = 0; col < numCols; col++) {
                int value = data[row][col];
                Color color = getColorForValue(value);
                g2d.setColor(color);
                g2d.fillRect(startX + col * (cellSize + padding), startY + row * (cellSize + padding), cellSize, cellSize);
            }
        }
    }

    // Define a method to map a value to a color
    private Color getColorForValue(int value) {
        if (value == 0) {
            return new Color(238, 238, 238); // Light gray for zero activity
        } else if (value <= 10) {
            return new Color(136, 196, 255); // Light blue for low activity
        } else if (value <= 25) {
            return new Color(21, 121, 255); // Medium blue for moderate activity
        } else if (value <= 50) {
            return new Color(0, 47, 255); // Dark blue for high activity
        } else {
            return Color.BLUE; // Darkest blue for very high activity
        }
    }

    public static void main(String[] args) {
        // Example data for the heatmap (7x52 grid)
        int[][] data2023 = new int[7][52];
        // Populate the data with evenly spread values up to 50
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 52; j++) {
                if (j % 7 == 5 || j % 7 == 6) { // Higher values on weekends
                    data2023[i][j] = (int) (Math.random() * 10) + 45; // Random value between 45 and 50
                } else {
                    data2023[i][j] = (int) (Math.random() * 51); // Random value between 0 and 50
                }
            }
        }

        // Example data for the heatmap (7x52 grid)
        int[][] data2024 = new int[7][52];
// Populate the data with evenly spread values up to 50
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 52; j++) {

                if (j >= 16) { // Stop filling after April 16th
                    break;
                }
                if (j % 7 == 5 || j % 7 == 6) { // Higher values on weekends
                    data2024[i][j] = (int) (Math.random() * 10) + 45; // Random value between 45 and 50
                } else {
                    data2024[i][j] = (int) (Math.random() * 51); // Random value between 0 and 50
                }
            }
            // Fill the rest with zeros after April 16th
            if (i == 3) {
                for (int j = 17; j < 52; j++) {
                    data2024[i][j] = 0;
                }
            }
        }


        JFrame frame = new JFrame("GitHub Heatmap");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1200, 300);

        HeatMap heatmap = new HeatMap(data2023);
        frame.add(heatmap);

        frame.setVisible(true);
    }
}
